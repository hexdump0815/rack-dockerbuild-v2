diff --git a/surge/CMakeLists.txt b/surge/CMakeLists.txt
index d0a8984b..8eb28e2d 100644
--- a/surge/CMakeLists.txt
+++ b/surge/CMakeLists.txt
@@ -77,7 +77,7 @@ if(CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
   add_compile_options(
     -Wno-multichar
     # Targeting Windows with GCC/Clang is experimental
-    $<$<NOT:$<OR:$<BOOL:${WIN32}>,$<BOOL:${SURGE_SKIP_WERROR}>>>:-Werror>
+    # $<$<NOT:$<OR:$<BOOL:${WIN32}>,$<BOOL:${SURGE_SKIP_WERROR}>>>:-Werror>
 
     # PE/COFF doesn't support visibility
     $<$<NOT:$<BOOL:${WIN32}>>:-fvisibility=hidden>
diff --git a/RackSDK.cmake b/RackSDK.cmake
index 0abbf43..6685454 100644
--- a/RackSDK.cmake
+++ b/RackSDK.cmake
@@ -70,7 +70,7 @@ set_target_properties(${RACK_PLUGIN_LIB} PROPERTIES PREFIX "")
 
 # Since the plugin's compiler could be a different version than Rack's compiler, link libstdc++ and libgcc statically to avoid ABI issues.
 add_link_options($<$<CXX_COMPILER_ID:GNU>:-static-libstdc++> $<$<PLATFORM_ID:Linux>:-static-libgcc>)
-add_compile_options($<IF:$<STREQUAL:${CMAKE_OSX_ARCHITECTURES},arm64>,-march=armv8-a+fp+simd,-march=nehalem>)
+add_compile_options(-march=armv8-a -mtune=cortex-a53 -DSIMDE_ENABLE_NATIVE_ALIASES)
 
 add_library(RackSDK INTERFACE)
 target_include_directories(RackSDK INTERFACE ${RACK_SDK_DIR}/include ${RACK_SDK_DIR}/dep/include)
diff --git a/Makefile b/Makefile
index 831cbbd..3f24b18 100644
--- a/Makefile
+++ b/Makefile
@@ -37,7 +37,7 @@ $(cmake_rack_plugin): CMakeLists.txt
 	cmake --install $(CMAKE_BUILD)
 
 rack_plugin: $(cmake_rack_plugin)
-	cp -vf $(cmake_rack_plugin) .
+	cp -vf $(cmake_rack_plugin) plugin.so
 
 # Add files to the ZIP package when running `make dist`
 dist: rack_plugin build/surge-data res
