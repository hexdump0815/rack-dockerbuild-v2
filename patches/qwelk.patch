based on: https://github.com/raincheque/qwelk/pull/14
see also: https://github.com/raincheque/qwelk/issues/13

diff --git a/plugin.json b/plugin.json
index dc4a2fe..f8074e1 100644
--- a/plugin.json
+++ b/plugin.json
@@ -1,7 +1,7 @@
 {
   "slug": "Qwelk",
   "name": "Qwelk",
-  "version": "1.0.0",
+  "version": "2.0.0",
   "license": "MIT",
   "brand": "Qwelk",
   "author": "raincheque",
@@ -133,4 +133,4 @@
       ]
     }
   ]
-}
\ No newline at end of file
+}
diff --git a/src/NEWS.cpp b/src/NEWS.cpp
index fc9642a..cb30221 100644
--- a/src/NEWS.cpp
+++ b/src/NEWS.cpp
@@ -104,7 +104,8 @@ void ModuleNews::process(const ProcessArgs& args)
         news = ceil(news);
 
     // wrap the bits around, e.g. wrap = 2, 1001 ->  0110 / wrap = -3,  1001 -> 0011
-    uint32_t bits = *(reinterpret_cast<uint32_t *>(&news));
+    uint32_t bits;
+    memcpy(&bits, &news, sizeof news);
     if (wrap > 0)
         bits = (bits << wrap) | (bits >> (32 - wrap));
     else if (wrap < 0) {
@@ -112,10 +113,11 @@ void ModuleNews::process(const ProcessArgs& args)
         bits = (bits >> wrap) | (bits << (32 - wrap));
     }
 
-    news = *((float *)&bits);
+    memcpy(&news, &bits, sizeof bits);
 
     // extract the key out the bits which represent the input signal
-    uint32_t key = *(reinterpret_cast<uint32_t *>(&news));
+    uint32_t key;
+    memcpy(&key, &news, sizeof news);
 
     // reset grid
     for (int i = 0; i < GSIZE; ++i)
